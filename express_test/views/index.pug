extends layout

block content
  div.header_container
    div.search_banner
      img(src="images/Magilogo.png", alt="", style="margin-left: 18%;")
      form#searchForm(action="/" method="GET")
        input#searchInput(type="text" name="q" placeholder="Search cards..."
          value=query.searchQuery
          style="background: none; border: 0px; height: 50px;")

      p(style="margin-left: 24%;") |
      button(type=button) Advanced 
      button(type=button) Syntax 
      button(type=button) Sets 
      button(type=button) Random 
      p(style="margin-left: 2%;") |

    div.sort_banner
      form#filterForm(action="/index" method="GET" style="width: wrap-content; margin-left: 18%;")
        input(type="hidden" name="q" value=query.searchQuery)

        label(for="ViewType")
        select#ViewType(name="view" onchange="this.form.submit()")
          option(value="cards" selected=(query.viewType === 'cards')) Cards
          option(value="all_prints" selected=(query.viewType === 'all_prints')) All Prints
          option(value="unique" selected=(query.viewType === 'unique')) Unique

        label(for="DisplayType")  as
        select#DisplayType(name="display" onchange="this.form.submit()")
          option(value="images" selected=(query.display === 'images')) Images
          option(value="checklist" selected=(query.display === 'checklist')) Checklist
          option(value="text" selected=(query.display === 'text')) Text Only
          option(value="full" selected=(query.display === 'full')) Full


        label(for="FilterType")  sorted by
        select#FilterType(name="sort" onchange="this.form.submit()")
          option(value="name" selected=(query.sortBy === 'name')) Name
          option(value="release_date" selected=(query.sortBy === 'release_date')) Release Date
          option(value="card_number" selected=(query.sortBy === 'card_number')) Set/Number
          option(value="year" selected=(query.sortBy === 'year')) Year

        label(for="SortType")  :
        select#SortType(name="order" onchange="this.form.submit()")
          option(value="asc" selected=(query.order === 'asc')) Ascending
          option(value="desc" selected=(query.order === 'desc')) Descending
        
      // Top pagination buttons
      button(type=button style="margin-left: 15%;" id="firstPageBtnTop") <<
      button(type=button id="prevPageBtnTop") < Previous
      span(style="margin: 0 10px; font-weight: bold;")
        | Page #{pagination.page || 1} of #{pagination.total_pages || 1}
      button(type=button id="nextPageBtnTop") Next >
      button(type=button id="lastPageBtnTop") >>

    div.result_banner
      if stats
        p Showing #{cards.length} of #{stats.total_cards} cards (#{stats.unique_cards} unique)
      else
        p Loading results...

  div.full_screen
  if cards && cards.length > 0
    if query.display === 'checklist'
      table(style="width: 90%; margin: auto; border-collapse: collapse;")
        thead
          tr
            th(style="border-bottom: 1px solid #ccc; text-align: left; padding: 8px;") Name
            th(style="border-bottom: 1px solid #ccc; text-align: left; padding: 8px;") Set/Number
            th(style="border-bottom: 1px solid #ccc; text-align: left; padding: 8px;") Rarity
        tbody
          each card in cards
            tr
              td(style="padding: 6px 8px;") #{card.name}
              td(style="padding: 6px 8px;") #{card.card_number}
              td(style="padding: 6px 8px;") #{card.rarity || 'Unknown'}
    else
      each card in cards
        - const imagePath = `images/${card.name}.png`
        img(src=imagePath, alt=card.name, title=`${card.name} - ${card.card_number}`)
  else
    p(style="grid-column: 1 / -1; text-align: center; padding: 40px;") No cards found


  script.
    // Real-time search
    const searchInput = document.getElementById('searchInput');
    let searchTimeout;

    searchInput.addEventListener('input', function(e) {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        document.getElementById('searchForm').submit();
      }, 500);  // Wait 500ms after user stops typing
    });

    // Prevent form submission on Enter if using real-time search
    document.getElementById('searchForm').addEventListener('submit', function(e) {
      // Allow normal form submission
    });
  
  script.
      function sendWindowSize() {
        const width = window.innerWidth;
        const height = window.innerHeight;

        const p = document.getElementById('windowSize');
        p.textContent = `Current window size: ${width} x ${height}`;

        fetch('/window-size', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ width, height })
        }).catch(err => console.error('Failed to send window size:', err));
      }
      // Send on initial load
      sendWindowSize();

      // Send every time window is resized
      window.addEventListener('resize', () => {
        sendWindowSize();
      });

  // Pagination functionality for the buttons
  script.
    document.addEventListener("DOMContentLoaded", function() {
      const currentPage = #{pagination.page || 1};
      const totalPages = #{pagination.total_pages || 1};
      const queryParams = new URLSearchParams(window.location.search);

      function goToPage(page) {
        queryParams.set("page", page);
        window.location.href = `/index?${queryParams.toString()}`;
      }

      function attachPaginationControls(prefix) {
        const first = document.getElementById(`firstPageBtn${prefix}`);
        const prev = document.getElementById(`prevPageBtn${prefix}`);
        const next = document.getElementById(`nextPageBtn${prefix}`);
        const last = document.getElementById(`lastPageBtn${prefix}`);

        if (first) first.addEventListener("click", () => { if (currentPage > 1) goToPage(1); });
        if (prev) prev.addEventListener("click", () => { if (currentPage > 1) goToPage(currentPage - 1); });
        if (next) next.addEventListener("click", () => { if (currentPage < totalPages) goToPage(currentPage + 1); });
        if (last) last.addEventListener("click", () => { if (currentPage < totalPages) goToPage(totalPages); });
      }

      attachPaginationControls("Top");
      attachPaginationControls("Bottom");
    });
